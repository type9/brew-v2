{"version":3,"sources":["components/nav.js","App.js","theme.js","serviceWorker.js","index.js"],"names":["Nav","props","styled","nav","theme","fg","seconadry","class","Component","App","state","history","simulation","div","bg","token","window","primary","secondary","spc_1","spc_2","spc_3","Boolean","location","hostname","match","GlobalStyle","createGlobalStyle","ReactDOM","render","Fragment","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8XA8BeA,E,YAzBX,WAAYC,GAAQ,qEACVA,I,sEAKN,IAAMD,EAAME,IAAOC,IAAV,KACe,SAAAF,GAAK,OAAIA,EAAMG,MAAMC,MAChC,SAAAJ,GAAK,OAAIA,EAAMG,MAAME,aAGlC,OACI,kBAACN,EAAD,KACI,uBAAGO,MAAM,SAAT,SACA,yBAAKA,MAAM,YACP,wBAAIA,MAAM,OACN,wBAAIA,MAAM,eAAV,cACA,wBAAIA,MAAM,QAAV,gB,GAlBNC,a,uJCoCHC,E,YAjCb,WAAYR,GAAQ,IAAD,8BACjB,4CAAMA,KACDS,MAAQ,CACXC,QAAU,CACR,CACEC,WAAY,QALD,E,sEAajB,IAAMH,EAAMP,IAAOW,IAAV,KACa,SAAAZ,GAAK,OAAIA,EAAMG,MAAMU,MAChC,SAAAb,GAAK,OAAIA,EAAMG,MAAME,aAM1BS,EAAQC,OAAOD,MAErB,OACE,kBAACN,EAAD,KACE,kBAAC,EAAD,MACA,uCAAaM,Q,GA3BHP,aCOHJ,EAbD,CAEVC,GAAI,QACJS,GAAI,UACJG,QAAS,QACTC,UAAW,OAGXC,MAAO,SACPC,MAAO,OACPC,MAAO,QCESC,QACW,cAA7BN,OAAOO,SAASC,UAEe,UAA7BR,OAAOO,SAASC,UAEhBR,OAAOO,SAASC,SAASC,MACvB,2D,0KCRN,IAAMC,EAAcC,YAAH,IAEWvB,EAAMU,GAGdV,EAAMiB,OAI1BO,IAASC,OACL,kBAAC,IAAMC,SAAP,KACI,kBAACJ,EAAD,MACA,kBAAC,IAAD,CAAetB,MAAOA,GAClB,kBAAC,EAAD,QAGR2B,SAASC,eAAe,SDyGtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"js/main.48ff4d59.chunk.js","sourcesContent":["import React, {Component} from \"react\"\n\nimport styled from \"styled-components\"\n\nclass Nav extends Component{\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        //STYLE\n        const Nav = styled.nav`\n            background-color: ${props => props.theme.fg};\n            color: ${props => props.theme.seconadry};\n        `;\n\n        return(\n            <Nav>\n                <a class=\"brand\">Twist</a>\n                <div class=\"collaspe\">\n                    <ul class=\"nav\">\n                        <li class=\"item-active\">Simulation</li>\n                        <li class=\"item\">Other</li>\n                    </ul>\n                </div>\n            </Nav>\n        );\n    }\n}\n\nexport default Nav;","import React, {Component} from \"react\";\n\nimport Nav from \"./components/nav\"\n\nimport styled from \"styled-components\"\n\nclass App extends Component{\n  constructor(props) {\n    super(props);\n    this.state = {\n      history : [\n        {\n          simulation: null\n        }\n      ],\n    }\n  }\n\n  render() {\n    //STYLE\n    const App = styled.div`\n      background-color: ${props => props.theme.bg};\n      color: ${props => props.theme.seconadry};\n\n      height: 16em;\n    `;\n    \n    //FUNCTIONS\n    const token = window.token\n\n    return(\n      <App>\n        <Nav />\n        <h1>Token = {token}</h1>\n      </App>\n    );\n  }\n\n}\n\nexport default App;","const theme = {\n    //COLORS\n    fg: \"white\",\n    bg: \"#F0F0F0\",\n    primary: \"black\",\n    secondary: \"cyan\",\n    //FONTS\n    //SPACING\n    spc_1: \"0.5rem\",\n    spc_2: \"1rem\",\n    spc_3: \"2rem\",\n};\n\nexport default theme;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport theme from \"./theme\";\n\nimport * as serviceWorker from './serviceWorker';\n\nimport {ThemeProvider, createGlobalStyle} from \"styled-components\";\n\nconst GlobalStyle = createGlobalStyle`\n     body{\n         background-color:${theme.bg};\n\n         margin: 0;\n         padding: ${theme.spc_3};\n     }\n`;\n\nReactDOM.render(\n    <React.Fragment>\n        <GlobalStyle />\n        <ThemeProvider theme={theme}>\n            <App />\n        </ThemeProvider>\n    </React.Fragment>, \n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}